name: deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Mostly adapted from https://learn.hashicorp.com/tutorials/terraform/github-actions
  infrastructure:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ops
    env:
      TF_VAR_do_token: '${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}'
      TF_VAR_newrelic_api_key: '${{ secrets.NEWRELIC_API_KEY }}'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          # see https://stackoverflow.com/questions/69925970/how-to-save-terraform-output-variable-into-a-github-action-s-environment-variabl
          terraform_wrapper: false
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
      - name: Terraform Init
        id: init
        run: terraform init 
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
      - name: Generate PR comment
        id: generate-pr-comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            _You can view deployment details after merge under the *Output Terraform vars* GitHub Actions step._

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            core.setOutput("comment", output);
      - name: Add comment to PR
        id: comment_to_pr
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ github.event.issue.number }}
          header: terraform
          message: |
            ${{ steps.generate-pr-comment.outputs.comment }}

      # These jobs execute after merge only.
      - name: Terraform Apply 
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: apply
        run: terraform apply -auto-approve -input=false
      - name: Output Terraform vars
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "DigitalOcean app URL: $(terraform output -raw do_app_url)"
          echo "DigitalOcean deployment ID: $(terraform output -raw do_app_deployment_id)"
      
  application:
    runs-on: ubuntu-latest
    needs: infrastructure
    steps:
      # Deploy only after merge.
      - name: DigitalOcean App Platform deployment
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: digitalocean/app_action@main
        with:
          app_name: core-api
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
